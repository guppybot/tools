class Run(object):
    def __init__(self):
        self._tasks = []

    def append(self, task):
        self._tasks.append(task)

    def out(self):
        print("#-guppy:v0.run_prelude:begin")
        print("#-guppy:v0.run_prelude:end")
        for task in self._tasks:
            print("#-guppy:v0.task:begin")
            print("#-guppy:v0.task:name {}".format(task._name))
            if task._toolchain is not None:
                print("#-guppy:v0.task:toolchain {}".format(task._toolchain))
            print("#-guppy:v0.task:require_docker {}".format("true" if task._require_docker else "false"))
            print("#-guppy:v0.task:require_nvidia_docker {}".format("true" if task._require_nvidia_docker else "false"))
            print("#-guppy:v0.task:require_distro {}".format(task._require_distro))
            if task._require_cuda is not None:
                print("#-guppy:v0.task:require_cuda {}".format(task._require_cuda))
            if task._require_gpu_arch is not None:
                print("#-guppy:v0.task:require_gpu_arch {}".format(task._require_gpu_arch))
            print("#-guppy:v0.task:allow_errors {}".format("true" if task._allow_errors else "false"))
            for sh_line in task._sh_lines:
                print("{}".format(sh_line))
            print("#-guppy:v0.task:end")

class Task(object):
    def __init__(self, name, toolchain=None):
        self._name = name
        self._toolchain = toolchain
        self._docker_build_path = None
        self._require_docker = True
        self._require_nvidia_docker = True
        self._require_distro = None
        self._require_cuda = None
        self._require_gpu_arch = "*"
        self._allow_errors = False
        self._sh_lines = []

    def name(self, opt):
        self._name = opt

    def toolchain(self, opt):
        self._toolchain = opt

    def docker_build_path(self, opt):
        self._docker_build_path = opt

    def require_docker(self, opt):
        self._require_docker = opt

    def require_nvidia_docker(self, opt):
        self._require_nvidia_docker = opt

    def require_distro(self, opt):
        self._require_distro = opt

    def require_cuda(self, opt):
        self._require_cuda = opt

    def require_gpu_arch(self, opt):
        self._require_gpu_arch = opt

    def allow_errors(self, opt):
        self._allow_errors = opt

    def sh(self, sh_line):
        self._sh_lines.append(sh_line)

def run():
    return Run()

def task(
        name=None,
        toolchain=None,
        require_docker=True,
        require_nvidia_docker=True,
        require_distro=None,
        require_cuda=None,
        require_gpu_arch="*",
        allow_errors=False,
        sh=[]):
    assert name is not None, "tasks must have a name"
    assert require_distro is not None, "tasks must specify a distro"
    task = Task(name, toolchain)
    task.require_docker(require_docker)
    task.require_nvidia_docker(require_nvidia_docker)
    task.require_distro(require_distro)
    task.require_cuda(require_cuda)
    task.require_gpu_arch(require_gpu_arch)
    task.allow_errors(allow_errors)
    for sh_line in sh:
        task.sh(sh_line)
    return task

def out(run):
    run.out()
