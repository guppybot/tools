import os.path
import urllib.parse
import sys

class MutableCache(object):
    def __init__(self):
        self._append_kvs = []

    def fetch_once(self, src_url, path=None):
        if path is None:
            src_url_parts = urllib.parse.urlsplit(src_url)
            src_url_path = src_url_parts[2]
            maybe_path = os.path.basename(src_url_path)
            if maybe_path is None or maybe_path == "":
                print("guppy: could not infer a cache path from a source URL: '{}'", src_url, file=sys.stderr)
                assert False
            path = maybe_path
        if path not in self._append_kvs:
            self._append_kvs.append((path, {"op": "fetch_once", "src_url": src_url}))

    def copy_once(self, src_path, path=None):
        if path is None:
            maybe_path = os.path.basename(src_path)
            if maybe_path is None or maybe_path == "":
                print("guppy: could not infer a cache path from a source path: '{}'", src_path, file=sys.stderr)
                assert False
            path = maybe_path
        if path not in self._append_kvs:
            self._append_kvs.append((path, {"op": "copy_once", "src_path": src_path}))

    def symlink_once(self, src_path, path=None):
        if path is None:
            maybe_path = os.path.basename(src_path)
            if maybe_path is None or maybe_path == "":
                print("guppy: could not infer a cache path from a source path: '{}'", src_path, file=sys.stderr)
                assert False
            path = maybe_path
        if path not in self._append_kvs:
            self._append_kvs.append((path, {"op": "symlink_once", "src_path": src_path}))

    def out(self):
        for path, v in self._append_kvs:
            value_str = None
            if v["op"] == "fetch_once":
                value_str = "fetch_once {}".format(v["src_url"])
            elif v["op"] == "copy_once":
                value_str = "copy_once {}".format(v["src_path"])
            elif v["op"] == "symlink_once":
                value_str = "symlink_once {}".format(v["src_path"])
            else:
                raise NotImplementedError
            assert value_str is not None
            print("#-guppy:v0.mutable_cache:append {} {}".format(path, value_str))

class Run(object):
    def __init__(self):
        self._tasks = []

    def append(self, task):
        self._tasks.append(task)

    def out(self):
        #print("#-guppy:v0.pre_run:begin")
        #print("#-guppy:v0.pre_run:end")
        for task in self._tasks:
            print("#-guppy:v0.task:begin")
            print("#-guppy:v0.task:name {}".format(task._name))
            if task._toolchain is not None:
                print("#-guppy:v0.task:toolchain {}".format(task._toolchain))
            print("#-guppy:v0.task:require_docker {}".format("true" if task._require_docker else "false"))
            print("#-guppy:v0.task:require_nvidia_docker {}".format("true" if task._require_nvidia_docker else "false"))
            print("#-guppy:v0.task:require_distro {}".format(task._require_distro))
            if task._require_cuda is not None:
                print("#-guppy:v0.task:require_cuda {}".format(task._require_cuda))
            if task._require_gpu_arch is not None:
                print("#-guppy:v0.task:require_gpu_arch {}".format(task._require_gpu_arch))
            print("#-guppy:v0.task:allow_errors {}".format("true" if task._allow_errors else "false"))
            for sh_line in task._sh_lines:
                print("{}".format(sh_line))
            print("#-guppy:v0.task:end")
        #print("#-guppy:v0.post_run:begin")
        #print("#-guppy:v0.post_run:end")

class Task(object):
    def __init__(self, name, toolchain=None):
        self._name = name
        self._toolchain = toolchain
        self._docker_build_path = None
        self._require_docker = True
        self._require_nvidia_docker = True
        self._require_distro = None
        self._require_cuda = None
        self._require_gpu_arch = "*"
        self._allow_errors = False
        self._sh_lines = []

    def name(self, opt):
        self._name = opt

    def toolchain(self, opt):
        self._toolchain = opt

    def docker_build_path(self, opt):
        self._docker_build_path = opt

    def require_docker(self, opt):
        self._require_docker = opt

    def require_nvidia_docker(self, opt):
        self._require_nvidia_docker = opt

    def require_distro(self, opt):
        self._require_distro = opt

    def require_cuda(self, opt):
        self._require_cuda = opt

    def require_gpu_arch(self, opt):
        self._require_gpu_arch = opt

    def allow_errors(self, opt):
        self._allow_errors = opt

    def sh(self, sh_line):
        self._sh_lines.append(sh_line)

def mutable_cache():
    # FIXME: there should be only one machine-scope mutable cache.
    return MutableCache()

def run():
    return Run()

def task(
        name=None,
        toolchain=None,
        require_docker=True,
        require_nvidia_docker=True,
        require_distro=None,
        require_cuda=None,
        require_gpu_arch="*",
        allow_errors=False,
        sh=[]):
    assert name is not None, "guppy: tasks must have a name"
    task = Task(name, toolchain)
    task.require_docker(require_docker)
    task.require_nvidia_docker(require_nvidia_docker)
    task.require_distro(require_distro)
    task.require_cuda(require_cuda)
    task.require_gpu_arch(require_gpu_arch)
    task.allow_errors(allow_errors)
    for sh_line in sh:
        task.sh(sh_line)
    return task

def out(run):
    run.out()
